services:
  # Gateway API
  gateway:
    build:
      context: .
      dockerfile: src/Gateway/RocketOps.Gateway/Dockerfile
    ports:
      - "5000:80"
      - "5001:443"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
    networks:
      - rocketops-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    depends_on:
      - monitoring-service
      - alerts-service
      - reporting-service
    restart: unless-stopped

  # Alerts Microservice
  alerts-service:
    build:
      context: .
      dockerfile: src/Services/Alerts.Api/Dockerfile
    ports:
      - "5020:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__CosmosDb=AccountEndpoint=https://cosmosdb:8081/;AccountKey=C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==
      - CosmosDb__DatabaseId=RocketOpsDb
    networks:
      - rocketops-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    depends_on:
      - cosmosdb
      - init-db
    restart: unless-stopped

  # Monitoring Microservice
  monitoring-service:
    build:
      context: .
      dockerfile: src/Services/RocketOps.Monitoring.Api/Dockerfile
    ports:
      - "5010:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__CosmosDb=AccountEndpoint=https://cosmosdb:8081/;AccountKey=C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==
      - CosmosDb__DatabaseId=RocketOpsDb
    networks:
      - rocketops-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    depends_on:
      - cosmosdb
      - init-db
    restart: unless-stopped

  # Reporting Microservice
  reporting-service:
    build:
      context: .
      dockerfile: src/Services/Reporting.Api/Dockerfile
    ports:
      - "5030:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__CosmosDb=AccountEndpoint=https://cosmosdb:8081/;AccountKey=C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==
      - CosmosDb__DatabaseId=RocketOpsDb
    networks:
      - rocketops-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    depends_on:
      - cosmosdb
      - init-db
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./ui/rocketops
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    environment:
      - REACT_APP_API_URL=http://localhost:5000
    networks:
      - rocketops-network
    depends_on:
      - gateway
    restart: unless-stopped

  # CosmosDB Emulator
  cosmosdb:
    image: mcr.microsoft.com/cosmosdb/linux/azure-cosmos-emulator:latest
    container_name: cosmosdb-emulator
    restart: always
    environment:
      - AZURE_COSMOS_EMULATOR_PARTITION_COUNT=10
      - AZURE_COSMOS_EMULATOR_ENABLE_DATA_PERSISTENCE=true
    ports:
      - "8081:8081"
      - "10251:10251"
      - "10252:10252"
      - "10253:10253"
      - "10254:10254"
    volumes:
      - cosmosdb-data:/data
    networks:
      - rocketops-network
    healthcheck:
      test: ["CMD", "wget", "--no-check-certificate", "--spider", "https://localhost:8081/_explorer/"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Database initialization service
  init-db:
    image: node:18-alpine
    depends_on:
      - cosmosdb
    networks:
      - rocketops-network
    volumes:
      - ./scripts:/app
    working_dir: /app
    command: >
      sh -c "npm install @azure/cosmos && node init-cosmos-db.js"
    restart: on-failure

volumes:
  cosmosdb-data:

networks:
  rocketops-network:
    driver: bridge